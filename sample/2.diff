@@ -4,6 +4,23 @@
 #include <array>
 
 namespace hunch {
+    /**
+        To approach this a bit more conceptionally:
+
+        Each mesh maintains an internal buffer ( possibly multiple buffers ).
+        This data is then uploaded to the GPU for use. This buffer can have different layout
+        based on how the vertex data is aligned - it can be interleaved or sequential[1].
+
+        A mesh has various streams, this makes up its vertex format. For example a float3 stream
+        for position, a float2 stream for UVs, or an int1 stream for bone indices. As it is
+        apparent, each stream has a data type ( float, int, etc. ) and a component count.
+
+        The stream writes one vertex at a time into its parent's buffer. How this write happens
+        depends on the layout ( interleaved or sequential ). The buffer is automatically resized
+        when it's full.
+
+        [1] - I mean all the vertex positions, then all the normals, then UVs, and so forth
+    **/
     class BaseMeshStream {
         public:
             const void* const data() const;
